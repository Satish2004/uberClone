                  This code selection appears to be a set of notes or comments related to the development of an application similar to Uber. It seems to be documenting the steps and tasks involved in setting up the backend and frontend of the application using React.

                  The notes mention the following key points:

                  - The entry point for the server is specified as "server.js" in the "main" field of the package.json file.
                  - The Express framework is used for handling routes and server-side logic.
                  - The "cors" package is used to enable cross-origin resource sharing between the frontend and backend.
                  - The application follows the MVC (Model-View-Controller) framework, with separate folders for models, views, and controllers.
                  - User authentication is implemented using a model for users and packages like bcrypt for password hashing and JSON web tokens (JWT) for generating tokens.
                  - Express-validator is used for validating and sanitizing user input in the routes.
                  - Services are created to interact with the database.
                  - Middleware is used to handle user authentication and protect certain routes.
                  - The code also mentions the creation of models and logic for captains, including generating authentication tokens and comparing passwords.

                  Please note that this documentation is based on the provided code selection and may not cover all aspects of the application. It is recommended to refer to the actual codebase and any additional documentation for a comprehensive understanding of the project.

                  For more detailed documentation, please refer to the README.md file in the project repository.
                  (DAY - 1)-->

Phale backend  then frontend using react
main hamare serever ka entry point hai serevr.js naki index.js package.json  se index.js hata ke server.js likhe -->   "main": "server.js",
sath hi sath humne usme npm i express dotenv and server ko link krne ke liye front to backend usme cors use kiya  


//to sabse pahle hum apna server setup kiye 
// then model ki ek captain hoga user hoga and all other things  using mongoose


//1st user authentiation -> create  model for use ans install mongoose package
// then install bcrypt for haashing password nd comapring and for  generate tocket or id then we are using JSON web tocket (JWT);
  sabhi fucntion ans logic complete hone ke bad sabhi ko routes me bhejunga all routes ka logic cotrollers ke pass jata hai to direct hm wahi send krenge
routes krne ke liye express ki jaruat hoti hai
then insatll express-validator
create services --> data base se interact karegi
//routes me jo bhi perform ya result ko dikhane ka logic hai wo controller ke express-validator --> {validationResult} me rahta hi



MVC --> model , view and  controllers framwork hai




(DAY-2)

abhi tak humne register route kiya hai then niche ke sb krenge for all user 
// captain ke liye baki hi
login route for user in user.router.js
log-out route
getUserProfile route---  //to isme ek functionallity dena hi ki hume middleware ke sath jo bhi user login hai nahi pahle check kro then check kro hai to profile dikha do nahi to error fake do usi ko banane ke liye ek naya folder banate hai middleware folder 

//jb hum decrypy kr rhe hai tb authUser me to tocken hum do jagah se le skate hai header se aur cookie se(app.js me require kro cookie-parser ko pahle) 
// (_1_)  header se lene ke liye jb api testing krte hia postman api se key me authorization aur value me bearer then space then tocken jo generate hua rahta hai use paste krte hai
// (_2_)  cookie se    res.cookie("token", token);  // ye like authentication ke liye hota hai cookies me token save karne ke liye jo pahle header me bhi bhejata hai aur cookie me bhi aur 
  // ye cookie wala hai

create blacklistTocken ->model
  TTL -> time to leave  --> partyicular time par delete automatically
  jab user authenticate hota hai to us user ko sirf 24 hrs k liye hi cookie save krega baki database se bhi nikal dega





//CAPTAIN MODEL
//DAY- 3
same work captain ke liye krna hai
create model same as user like fullname -> first name , last name 
vechical color capacity all about target to the captain 

then target to Schema and create logic like captainSchema.module.exports --> make logic of generateAuthTocken then inside the tocken we get the tocken for cookies to expairs under the 24 headers
then create a compared pass and convert that password in hash password then create a logic to if captain and for user login again into the webite then ask to authenticate but ensure that u r password convert in hash password and prev store hashpass compare the further process yepp good to goo

then create routes-> captain.route.js and controller -> captain-controller.js then route ki  sabhi logic controller me likhi jati hai uske bad use route me lekar routing krte hai fir app.js ko dete hai
yaha se bhi middleware function genearte hota hi ki wo routes me jaye then routes se to easily uske logic means controller ke pass ja sakte hai 

then we create captain.service.js 



//DAY- 4
captian login and logout feature -> routes->captain.routes.js me kaam hai controlers-> captain-controller.js me  and auth.middleware.js -> authCaptain me 




//CLIENT SIDE-->

//then work in React and then at the end how to connect/integrate react  with  backend
//creating login and logout client side me
Routing kiye uske liye npm i react-router-dom use kiye 
// main.jsx me import {BrowserRouter} kiye the App.jsx ko wrapp kiye taki app me chale
 button class name w-full  flex items-center justify-center text-xl bg-black text-white rounded-full hover:bg-slate-900 p-3 text-center align-middle
 
 then two way binding krenge 
 jisme useState banayenge ek email ke liye and ek password ke liye 
 // two way binding krte hai to uski value me email and password then hai jisme se baad me usko onchange ke sath setEmail and setPassword ke event.target.value ko change krwake show krte hai jisse react 
 ko bhi pata chalta hai

 create captainLogin page same as userLogin

DAY 5-->
 then create userSignup and captaiSignup 
after that we create context -> context centerlized our data basically it is overcome the props
uh can use redux in place of context 

(1) first of all you need to wrap all the app.jsx in main.jsx
like <UserContext> 
   <BrowserRouter> -> ye routing ke liye tha
      <App />
    </BrowserRouter> 
    </UserContext> --> ye context api ke liye hai jisko bhi data lena ho yaha is folder se le lena direct hoga props se overcome hoga nahi to dikkat aati hai
      >Example heading<span
        class="badge bg-primary"
        >New</span
      ><hai
    >
    and import UserContext in main also

    then 
   example--->

   import React from "react";

//context which pass data in further components
export const userDataContext = React.createContext();

const userContext = ({ children }) => {
  return (
    <div>
      {/* pass data in further components */}
      <userDataContext.Provider>{children}</userDataContext.Provider>
    </div>
  );
};

export default userContext;


//backend code 3hrs

    

 

 